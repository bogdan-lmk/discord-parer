import asyncio
import json
import aiohttp
import time
import threading
from datetime import datetime, timedelta
from loguru import logger
from discord_telegram_parser.models.message import Message
from discord_telegram_parser.config.settings import config

class DiscordWebSocketService:
    def __init__(self, telegram_bot=None):
        self.telegram_bot = telegram_bot
        self.websockets = []
        self.heartbeat_interval = 41250
        self.session_id = None
        self.last_sequence = None
        self.subscribed_channels = set()
        self.http_accessible_channels = set()
        self.websocket_accessible_channels = set()
        self.running = False
        
        # –ù–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        self.last_server_scan = 0
        self.server_scan_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.known_servers = set()
        self.auto_discovery_enabled = True
        self.discovery_lock = threading.Lock()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        for token in config.DISCORD_TOKENS:
            ws_session = {
                'token': token,
                'websocket': None,
                'session': None,
                'heartbeat_task': None,
                'user_id': None,
                'connected_guilds': set(),
                'last_guild_sync': 0
            }
            self.websockets.append(ws_session)
    
    async def identify(self, websocket, token):
        """Send IDENTIFY payload —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ intents"""
        identify_payload = {
            "op": 2,
            "d": {
                "token": token,
                "properties": {
                    "$os": "linux",
                    "$browser": "discord_parser_enhanced",
                    "$device": "discord_parser_enhanced"
                },
                "compress": False,
                "large_threshold": 50,
                "intents": 33281  # GUILDS (1) + GUILD_MESSAGES (512) + MESSAGE_CONTENT (32768)
            }
        }
        await websocket.send_str(json.dumps(identify_payload))
        logger.info(f"üîë Sent IDENTIFY with enhanced intents for auto-discovery")
    
    async def send_heartbeat(self, websocket, interval):
        """Send periodic heartbeat to maintain connection"""
        try:
            while self.running:
                heartbeat_payload = {
                    "op": 1,
                    "d": self.last_sequence
                }
                await websocket.send_str(json.dumps(heartbeat_payload))
                logger.debug("üíì Sent heartbeat")
                await asyncio.sleep(interval / 1000)
        except asyncio.CancelledError:
            logger.info("Heartbeat task cancelled")
        except Exception as e:
            logger.error(f"Error in heartbeat: {e}")

    async def periodic_server_discovery(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        while self.running:
            try:
                await asyncio.sleep(self.server_scan_interval)
                
                if not self.auto_discovery_enabled:
                    continue
                
                current_time = time.time()
                if current_time - self.last_server_scan > self.server_scan_interval:
                    logger.info("üîç –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
                    await self.discover_and_add_new_servers()
                    self.last_server_scan = current_time
                    
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                await asyncio.sleep(60)

    async def discover_and_add_new_servers(self):
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–æ–Ω—Ñ–∏–≥"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–∏—Ç–µ–ª—å
            from discord_telegram_parser.utils.channel_id_parser import discover_new_servers_only
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            new_servers = await loop.run_in_executor(None, discover_new_servers_only)
            
            if new_servers:
                with self.discovery_lock:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –≤ –∫–æ–Ω—Ñ–∏–≥
                    for server_name, channels in new_servers.items():
                        if server_name not in config.SERVER_CHANNEL_MAPPINGS:
                            config.SERVER_CHANNEL_MAPPINGS[server_name] = channels
                            self.known_servers.add(server_name)
                            
                            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –≤ –ø–æ–¥–ø–∏—Å–∫–∏
                            for channel_id in channels.keys():
                                self.subscribed_channels.add(channel_id)
                                logger.info(f"üì° –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∫—É: {channel_id}")
                            
                            logger.success(f"üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä: {server_name} ({len(channels)} –∫–∞–Ω–∞–ª–æ–≤)")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫–∏ –≤ Telegram –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
                if self.telegram_bot:
                    for server_name in new_servers.keys():
                        try:
                            topic_id = await loop.run_in_executor(
                        None,
                        self.telegram_bot._get_or_create_topic_safe,
                        message.server_name
                    )
                    
                    if topic_id is None:
                        logger.error(f"‚ùå Failed to get/create topic for {message.server_name}")
                        return
                else:
                    logger.error("‚ùå Cannot create topic - chat doesn't support topics")
                    return
            else:
                logger.info(f"‚úÖ Using existing topic {topic_id} for {message.server_name}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            formatted = self.telegram_bot.format_message(message)
            sent_msg = await loop.run_in_executor(
                None,
                self.telegram_bot._send_message,
                formatted,
                None,
                topic_id,
                message.server_name
            )
            
            if sent_msg:
                self.telegram_bot.message_mappings[str(message.timestamp)] = sent_msg.message_id
                self.telegram_bot._save_data()
                
                topic_info = f" to topic {topic_id}" if topic_id else " as regular message"
                logger.success(f"‚úÖ Successfully forwarded{topic_info}")
            else:
                logger.error("‚ùå Failed to send to Telegram")
            
        except Exception as e:
            logger.error(f"‚ùå Error forwarding to Telegram: {e}")

    async def connect_websocket(self, ws_session):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Discord Gateway WebSocket"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º URL Gateway
            async with aiohttp.ClientSession() as session:
                async with session.get('https://discord.com/api/v9/gateway') as resp:
                    gateway_data = await resp.json()
                    gateway_url = gateway_data['url']
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
            ws_session['session'] = aiohttp.ClientSession()
            ws_session['websocket'] = await ws_session['session'].ws_connect(
                f"{gateway_url}/?v=9&encoding=json"
            )
            
            logger.info(f"üîó Connected to Discord Gateway: {gateway_url}")
            
            # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            async for msg in ws_session['websocket']:
                if msg.type == aiohttp.WSMsgType.TEXT:
                    data = json.loads(msg.data)
                    await self.handle_gateway_message(data, ws_session)
                elif msg.type == aiohttp.WSMsgType.ERROR:
                    logger.error(f"WebSocket error: {ws_session['websocket'].exception()}")
                    break
                elif msg.type == aiohttp.WSMsgType.CLOSE:
                    logger.warning("WebSocket connection closed")
                    break
                    
        except Exception as e:
            logger.error(f"WebSocket connection error: {e}")
        finally:
            await self.cleanup_websocket(ws_session)

    async def cleanup_websocket(self, ws_session):
        """–û—á–∏—Å—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if ws_session['heartbeat_task']:
                ws_session['heartbeat_task'].cancel()
                try:
                    await ws_session['heartbeat_task']
                except asyncio.CancelledError:
                    pass
            
            if ws_session['websocket'] and not ws_session['websocket'].closed:
                await ws_session['websocket'].close()
            
            if ws_session['session'] and not ws_session['session'].closed:
                await ws_session['session'].close()
                
        except Exception as e:
            logger.error(f"Error cleaning up WebSocket: {e}")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–∏—Å–∞ —Å –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º"""
        self.running = True
        logger.info("üöÄ Starting Enhanced Discord WebSocket service with auto-discovery...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        self.known_servers = set(config.SERVER_CHANNEL_MAPPINGS.keys())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
        discovery_task = asyncio.create_task(self.periodic_server_discovery())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        websocket_tasks = []
        for ws_session in self.websockets:
            task = asyncio.create_task(self.connect_websocket(ws_session))
            websocket_tasks.append(task)
        
        try:
            await asyncio.gather(discovery_task, *websocket_tasks)
        except Exception as e:
            logger.error(f"Error in WebSocket service: {e}")
        finally:
            self.running = False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–µ—Ä–≤–∏—Å–∞"""
        self.running = False
        logger.info("Stopping Enhanced Discord WebSocket service...")
        
        for ws_session in self.websockets:
            await self.cleanup_websocket(ws_session)

    def add_channel_subscription(self, channel_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –ø–æ–¥–ø–∏—Å–∫–∏"""
        self.subscribed_channels.add(channel_id)
        logger.info(f"Added channel {channel_id} to subscriptions")

    def remove_channel_subscription(self, channel_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫"""
        self.subscribed_channels.discard(channel_id)
        self.http_accessible_channels.discard(channel_id)
        self.websocket_accessible_channels.discard(channel_id)
        logger.info(f"Removed channel {channel_id} from subscriptions")

    def enable_auto_discovery(self):
        """–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ"""
        self.auto_discovery_enabled = True
        logger.info("üîç Auto-discovery ENABLED")

    def disable_auto_discovery(self):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ"""
        self.auto_discovery_enabled = False
        logger.info("üîç Auto-discovery DISABLED")

    def get_discovery_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
        return {
            'auto_discovery_enabled': self.auto_discovery_enabled,
            'known_servers': len(self.known_servers),
            'subscribed_channels': len(self.subscribed_channels),
            'last_server_scan': self.last_server_scan,
            'scan_interval': self.server_scan_interval
        }d = await loop.run_in_executor(
                                None,
                                self.telegram_bot._get_or_create_topic_safe,
                                server_name
                            )
                            if topic_id:
                                logger.success(f"üìã –°–æ–∑–¥–∞–Ω —Ç–æ–ø–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {topic_id}")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è {server_name}: {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
                self._save_updated_config()
                
                logger.success(f"üéâ –ê–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(new_servers)} –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
            else:
                logger.debug("‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")

    def _save_updated_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –≤ —Ñ–∞–π–ª"""
        try:
            config_file_path = 'discord_telegram_parser/config/settings.py'
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
            with open(config_file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            new_mappings = f"\n\n# Auto-updated server mappings - {timestamp}\nconfig.SERVER_CHANNEL_MAPPINGS = {json.dumps(config.SERVER_CHANNEL_MAPPINGS, indent=2, ensure_ascii=False)}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            content += new_mappings
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(config_file_path, 'w', encoding='utf-8') as f:
                f.write(content)
                
            logger.info("üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

    async def handle_gateway_message(self, data, ws_session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Discord Gateway —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
        try:
            if data['op'] == 10:  # HELLO
                self.heartbeat_interval = data['d']['heartbeat_interval']
                logger.info(f"üëã Received HELLO, heartbeat interval: {self.heartbeat_interval}ms")
                
                # Start heartbeat
                ws_session['heartbeat_task'] = asyncio.create_task(
                    self.send_heartbeat(ws_session['websocket'], self.heartbeat_interval)
                )
                
                # Send IDENTIFY
                await self.identify(ws_session['websocket'], ws_session['token'])
                
            elif data['op'] == 11:  # HEARTBEAT_ACK
                logger.debug("üíö Received heartbeat ACK")
                
            elif data['op'] == 0:  # DISPATCH
                self.last_sequence = data['s']
                event_type = data['t']
                
                if event_type == 'READY':
                    await self._handle_ready_event(data['d'], ws_session)
                    
                elif event_type == 'MESSAGE_CREATE':
                    await self.handle_new_message(data['d'])
                    
                elif event_type == 'GUILD_CREATE':
                    await self._handle_guild_create_event(data['d'], ws_session)
                    
                elif event_type == 'GUILD_DELETE':
                    await self._handle_guild_delete_event(data['d'], ws_session)
                    
        except Exception as e:
            logger.error(f"Error handling gateway message: {e}")

    async def _handle_ready_event(self, ready_data, ws_session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ READY —Å–æ–±—ã—Ç–∏—è"""
        self.session_id = ready_data['session_id']
        ws_session['user_id'] = ready_data['user']['id']
        user = ready_data['user']
        guilds = ready_data['guilds']
        
        logger.success(f"üöÄ WebSocket ready for user: {user['username']}")
        logger.info(f"üè∞ Connected to {len(guilds)} guilds")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        ws_session['connected_guilds'] = {g['id'] for g in guilds}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        if not self.known_servers:
            self.known_servers = set(config.SERVER_CHANNEL_MAPPINGS.keys())
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–∏–±—Ä–∏–¥–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤
        await self.hybrid_channel_verification(ws_session, guilds)

    async def _handle_guild_create_event(self, guild_data, ws_session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GUILD_CREATE - –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è"""
        guild_id = guild_data['id']
        guild_name = guild_data['name']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
        if guild_id not in ws_session['connected_guilds']:
            logger.info(f"üÜï –ù–û–í–´–ô –°–ï–†–í–ï–† –û–ë–ù–ê–†–£–ñ–ï–ù: {guild_name} (ID: {guild_id})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
            ws_session['connected_guilds'].add(guild_id)
            
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
            if self.auto_discovery_enabled and guild_name not in self.known_servers:
                await self._process_new_guild_real_time(guild_data, ws_session)
        else:
            # –≠—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã
            await self.process_guild_channels(guild_data, ws_session)

    async def _handle_guild_delete_event(self, guild_data, ws_session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GUILD_DELETE - —Å–µ—Ä–≤–µ—Ä –ø–æ–∫–∏–Ω—É—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        guild_id = guild_data['id']
        unavailable = guild_data.get('unavailable', False)
        
        if unavailable:
            logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä {guild_id} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.info(f"üëã –ü–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Ä–≤–µ—Ä {guild_id}")
            ws_session['connected_guilds'].discard(guild_id)

    async def _process_new_guild_real_time(self, guild_data, ws_session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –ü–û–õ–ù–û–ô —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"""
        guild_name = guild_data['name']
        guild_id = guild_data['id']
        
        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: {guild_name}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º announcement –∫–∞–Ω–∞–ª—ã
            announcement_channels = await self._extract_announcement_channels_from_guild(guild_data)
            
            if announcement_channels:
                with self.discovery_lock:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥
                    config.SERVER_CHANNEL_MAPPINGS[guild_name] = {}
                    for channel_id, channel_info in announcement_channels.items():
                        config.SERVER_CHANNEL_MAPPINGS[guild_name][channel_id] = channel_info['name']
                        # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–¥–ø–∏—Å–∫–∏ WebSocket
                        self.subscribed_channels.add(channel_id)
                        self.websocket_accessible_channels.add(channel_id)
                        logger.info(f"  üì° –î–æ–±–∞–≤–ª–µ–Ω –≤ WebSocket –ø–æ–¥–ø–∏—Å–∫—É: {channel_info['name']} ({channel_id})")
                    
                    self.known_servers.add(guild_name)
                
                logger.success(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: {guild_name} ({len(announcement_channels)} –∫–∞–Ω–∞–ª–æ–≤)")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫ –≤ Telegram
                if self.telegram_bot:
                    try:
                        loop = asyncio.get_event_loop()
                        topic_id = await loop.run_in_executor(
                            None,
                            self.telegram_bot._get_or_create_topic_safe,
                            guild_name
                        )
                        if topic_id:
                            logger.success(f"üìã –°–æ–∑–¥–∞–Ω —Ç–æ–ø–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ {guild_name}: {topic_id}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è {guild_name}: {e}")
                
                # –ù–û–í–û–ï: –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                await self._sync_new_server_messages(guild_name, announcement_channels, ws_session)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
                self._save_updated_config()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                if self.telegram_bot:
                    await self._send_new_server_notification(guild_name, len(announcement_channels))
            else:
                logger.info(f"‚ÑπÔ∏è –í –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ {guild_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã announcement –∫–∞–Ω–∞–ª—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ {guild_name}: {e}")

    async def _sync_new_server_messages(self, server_name, announcement_channels, ws_session):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info(f"üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {server_name}")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
            from discord_telegram_parser.main import DiscordParser
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            parser = DiscordParser()
            all_messages = []
            
            for channel_id, channel_info in announcement_channels.items():
                channel_name = channel_info['name']
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
                    messages = parser.parse_announcement_channel(
                        channel_id, 
                        server_name,
                        channel_name,
                        limit=5
                    )
                    
                    if messages:
                        # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                        for msg in messages:
                            msg.content = self.safe_encode_string(msg.content)
                            msg.author = self.safe_encode_string(msg.author)
                            msg.server_name = self.safe_encode_string(msg.server_name)
                            msg.channel_name = self.safe_encode_string(msg.channel_name)
                        
                        all_messages.extend(messages)
                        logger.success(f"  üì• {channel_name}: –ø–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    else:
                        logger.info(f"  ‚ÑπÔ∏è {channel_name}: —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        
                except Exception as e:
                    logger.warning(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {channel_name}: {e}")
                    continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –µ—Å–ª–∏ –µ—Å—Ç—å
            if all_messages:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                all_messages.sort(key=lambda x: x.timestamp)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
                if self.telegram_bot:
                    loop = asyncio.get_event_loop()
                    await loop.run_in_executor(
                        None,
                        self.telegram_bot.send_messages,
                        all_messages
                    )
                    
                    logger.success(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {server_name}")
                else:
                    logger.warning("‚ùå Telegram bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                logger.info(f"‚ÑπÔ∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ {server_name}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {server_name}: {e}")

    def safe_encode_string(self, text):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫"""
        if not text:
            return ""
        try:
            if isinstance(text, str):
                text = text.encode('utf-8', 'surrogatepass').decode('utf-8', 'replace')
                text = ''.join(char for char in text if ord(char) < 0x110000)
            return text
        except (UnicodeEncodeError, UnicodeDecodeError):
            return "[Encoding Error]"

    async def _extract_announcement_channels_from_guild(self, guild_data):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º announcement –∫–∞–Ω–∞–ª—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞"""
        channels = guild_data.get('channels', [])
        announcement_channels = {}
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ keywords –¥–ª—è –ø–æ–∏—Å–∫–∞
        priority_keywords = [
            'announcements',     # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            'announcement', 
            'news',
            'updates',
            '–≤–∞–∂–Ω–æ–µ',
            '–æ–±—ä—è–≤–ª–µ–Ω–∏—è'
        ]
        
        for channel in channels:
            if channel['type'] not in [0, 5]:  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ announcement –∫–∞–Ω–∞–ª—ã
                continue
                
            channel_name = channel['name'].lower()
            
            # 1. –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π announcement —Ç–∏–ø (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)
            if channel.get('type') == 5:
                announcement_channels[channel['id']] = {
                    'name': channel['name'],
                    'type': channel['type'],
                    'priority': 1
                }
                continue
            
            # 2. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ "announcements" (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
            if channel_name == 'announcements':
                announcement_channels[channel['id']] = {
                    'name': channel['name'],
                    'type': channel['type'],
                    'priority': 2
                }
                continue
            
            # 3. –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ keywords (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3-10)
            for i, keyword in enumerate(priority_keywords):
                if keyword in channel_name:
                    announcement_channels[channel['id']] = {
                        'name': channel['name'],
                        'type': channel['type'],
                        'priority': 3 + i
                    }
                    break
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3 –∫–∞–Ω–∞–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        sorted_channels = dict(sorted(
            announcement_channels.items(),
            key=lambda x: x[1]['priority']
        )[:3])
        
        return sorted_channels

    async def _send_new_server_notification(self, server_name, channels_count):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ –≤ Telegram"""
        try:
            notification_text = (
                f"üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –î–û–ë–ê–í–õ–ï–ù –ù–û–í–´–ô –°–ï–†–í–ï–†!\n\n"
                f"üè∞ –°–µ—Ä–≤–µ—Ä: {server_name}\n"
                f"üì¢ Announcement –∫–∞–Ω–∞–ª–æ–≤: {channels_count}\n"
                f"‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ WebSocket –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
                f"üìã –¢–æ–ø–∏–∫ —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                f"üì• –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n\n"
                f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω! üöÄ"
            )
            
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(
                None,
                self.telegram_bot._send_message,
                notification_text,
                None,  # chat_id
                None,  # message_thread_id
                None   # server_name
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ: {e}")

    async def test_http_access(self, channel_id, server_name, channel_name, token):
        """Test HTTP API access"""
        try:
            async with aiohttp.ClientSession() as session:
                headers = {'Authorization': token}
                
                async with session.get(
                    f'https://discord.com/api/v9/channels/{channel_id}/messages?limit=1',
                    headers=headers
                ) as resp:
                    return resp.status == 200
                        
        except Exception:
            return False

    def check_websocket_channel_access(self, channel_id, guilds_data):
        """Check if channel is accessible via WebSocket guild data"""
        for guild in guilds_data:
            channels = guild.get('channels', [])
            for channel in channels:
                if channel['id'] == channel_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                    if channel['type'] == 0 and channel['name'].lower() == 'announcements':
                        return True
                    if channel.get('type') == 5:
                        return True
                    if (channel['type'] == 0 and 
                        any(keyword in channel['name'].lower() 
                            for keyword in ['announcements', 'announcement'])):
                        return True
        return False

    async def hybrid_channel_verification(self, ws_session, guilds_data):
        """–ì–∏–±—Ä–∏–¥–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: HTTP + WebSocket –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info("üîç Starting hybrid channel verification...")
        
        http_working = []
        websocket_only = []
        total_monitoring = []
        failed_completely = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for server, channels in config.SERVER_CHANNEL_MAPPINGS.items():
            if not channels:
                continue
                
            for channel_id, channel_name in channels.items():
                logger.debug(f"üß™ Testing {server}#{channel_name}...")
                
                # –¢–µ—Å—Ç 1: HTTP API
                http_works = await self.test_http_access(
                    channel_id, server, channel_name, ws_session['token']
                )
                
                # –¢–µ—Å—Ç 2: WebSocket
                websocket_works = self.check_websocket_channel_access(channel_id, guilds_data)
                
                if http_works and websocket_works:
                    self.http_accessible_channels.add(channel_id)
                    self.websocket_accessible_channels.add(channel_id)
                    self.subscribed_channels.add(channel_id)
                    http_working.append((server, channel_name, channel_id))
                    total_monitoring.append((server, channel_name, channel_id, "HTTP+WS"))
                    
                elif not http_works and websocket_works:
                    self.websocket_accessible_channels.add(channel_id)
                    self.subscribed_channels.add(channel_id)
                    websocket_only.append((server, channel_name, channel_id))
                    total_monitoring.append((server, channel_name, channel_id, "WS only"))
                    
                elif http_works and not websocket_works:
                    self.http_accessible_channels.add(channel_id)
                    logger.warning(f"   ‚ö†Ô∏è {server}#{channel_name} - HTTP only")
                    
                else:
                    failed_completely.append((server, channel_name, channel_id))

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info(f"\nüìä Channel Verification Results:")
        logger.info(f"   üéâ Full access (HTTP+WS): {len(http_working)} channels")
        logger.info(f"   üîå WebSocket only: {len(websocket_only)} channels")
        logger.info(f"   üì° Total monitoring: {len(total_monitoring)} channels")
        logger.info(f"   ‚ùå Failed: {len(failed_completely)} channels")
        
        return len(total_monitoring)

    async def process_guild_channels(self, guild_data, ws_session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            guild_name = guild_data['name']
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            if guild_name not in self.known_servers and self.auto_discovery_enabled:
                await self._process_new_guild_real_time(guild_data, ws_session)
                        
        except Exception as e:
            logger.error(f"Error processing guild channels: {e}")

    async def handle_new_message(self, message_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            channel_id = message_data['channel_id']
            
            # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            if channel_id not in self.subscribed_channels:
                logger.debug(f"üîá –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {channel_id} - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            server_name = None
            channel_name = None
            
            for server, channels in config.SERVER_CHANNEL_MAPPINGS.items():
                if channel_id in channels:
                    server_name = server
                    channel_name = channels[channel_id]
                    break
            
            if not server_name:
                logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –Ω–æ –Ω–µ–º–∞–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {channel_id}")
                return
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            try:
                content = message_data.get('content', '')
                if content:
                    content = content.encode('utf-8', 'surrogatepass').decode('utf-8', 'replace')
                    content = ''.join(char for char in content if ord(char) < 0x110000)
                else:
                    return
            except:
                content = '[Message content encoding error]'
            
            try:
                author = message_data['author']['username']
                author = author.encode('utf-8', 'surrogatepass').decode('utf-8', 'replace')
                author = ''.join(char for char in author if ord(char) < 0x110000)
            except:
                author = 'Unknown User'
            
            if not content.strip():
                return
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = Message(
                content=content,
                timestamp=datetime.fromisoformat(message_data['timestamp'].replace('Z', '+00:00')),
                server_name=server_name,
                channel_name=channel_name,
                author=author
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            access_type = ""
            if channel_id in self.http_accessible_channels and channel_id in self.websocket_accessible_channels:
                access_type = " (HTTP+WS)"
            elif channel_id in self.websocket_accessible_channels:
                access_type = " (WS only)"
            
            logger.info(f"üéâ NEW MESSAGE RECEIVED{access_type}!")
            logger.info(f"   üìç {server_name}#{channel_name}")
            logger.info(f"   üë§ {author}")
            logger.info(f"   üí¨ {content[:100]}...")
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ Telegram
            if self.telegram_bot:
                await self.forward_to_telegram(message)
                
        except Exception as e:
            logger.error(f"‚ùå Error handling new message: {e}")

    async def forward_to_telegram(self, message):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–ø–∏–∫–∞–º–∏"""
        try:
            logger.info(f"üöÄ Forwarding to Telegram: {message.server_name}#{message.channel_name}")
            
            loop = asyncio.get_event_loop()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫
            topic_id = await loop.run_in_executor(
                None,
                self.telegram_bot.get_server_topic_id,
                message.server_name
            )
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if topic_id is None:
                if self.telegram_bot._check_if_supergroup_with_topics(config.TELEGRAM_CHAT_ID):
                    logger.info(f"üîç No existing topic found for {message.server_name}, creating new one...")
                    topic_i