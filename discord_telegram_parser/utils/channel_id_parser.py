import requests
import json
import os
import time
from typing import Dict, List, Tuple, Optional
from loguru import logger
from dotenv import load_dotenv

class DiscordServerDiscovery:
    def __init__(self, tokens: List[str]):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        self.tokens = tokens if isinstance(tokens, list) else [tokens]
        self.sessions = []
        self.servers_data = {}
        self.last_scan_timestamp = 0
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        for token in self.tokens:
            session = requests.Session()
            session.headers = {'Authorization': token}
            self.sessions.append({
                'session': session,
                'token': token,
                'user_info': None
            })
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        self._validate_tokens()

    def _validate_tokens(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
        valid_sessions = []
        
        for session_data in self.sessions:
            try:
                r = session_data['session'].get('https://discord.com/api/v9/users/@me')
                if r.status_code == 200:
                    user_info = r.json()
                    session_data['user_info'] = user_info
                    valid_sessions.append(session_data)
                    logger.info(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è: {user_info['username']}#{user_info['discriminator']}")
                else:
                    logger.error(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: HTTP {r.status_code}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        
        self.sessions = valid_sessions
        logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(self.sessions)}")

    def get_all_guilds(self) -> Dict[str, dict]:
        """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        all_guilds = {}
        
        for session_data in self.sessions:
            session = session_data['session']
            username = session_data['user_info']['username']
            
            try:
                guilds = self._get_guilds_paginated(session)
                logger.info(f"üè∞ {username}: –Ω–∞–π–¥–µ–Ω–æ {len(guilds)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
                
                for guild in guilds:
                    guild_id = guild['id']
                    # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É–∂–µ –µ—Å—Ç—å –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    if guild_id not in all_guilds:
                        all_guilds[guild_id] = {
                            'guild_data': guild,
                            'accessible_tokens': [],
                            'channels': {}
                        }
                    
                    all_guilds[guild_id]['accessible_tokens'].append({
                        'username': username,
                        'session': session
                    })
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è {username}: {e}")
        
        logger.success(f"üéâ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(all_guilds)}")
        return all_guilds

    def _get_guilds_paginated(self, session: requests.Session) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        guilds = []
        url = 'https://discord.com/api/v9/users/@me/guilds?limit=200'  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
        
        while url:
            try:
                r = session.get(url)
                if r.status_code == 200:
                    batch = r.json()
                    guilds.extend(batch)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é —á–µ—Ä–µ–∑ Link header
                    if 'Link' in r.headers:
                        links = r.headers['Link'].split(',')
                        next_url = None
                        for link in links:
                            if 'rel="next"' in link:
                                next_url = link[link.find('<')+1:link.find('>')]
                                break
                        url = next_url
                    else:
                        url = None
                        
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –ª–∏–º–∏—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                    if len(batch) < 200:
                        url = None
                        
                elif r.status_code == 429:
                    retry_after = float(r.json().get('retry_after', 1))
                    logger.warning(f"‚è≥ Rate limit, –∂–¥–µ–º {retry_after}—Å...")
                    time.sleep(retry_after)
                    continue
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤: HTTP {r.status_code}")
                    break
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
                break
                
        return guilds

    def get_guild_channels_multi_token(self, guild_id: str, guild_name: str, token_sessions: List[dict]) -> Dict[str, dict]:
        """–ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–æ–±—É—è —Ä–∞–∑–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã"""
        for token_data in token_sessions:
            session = token_data['session']
            username = token_data['username']
            
            try:
                channels = self._get_guild_channels_paginated(session, guild_id)
                if channels:
                    logger.debug(f"‚úÖ {guild_name}: –ø–æ–ª—É—á–µ–Ω—ã –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ {username}")
                    return self._filter_announcement_channels(channels)
                    
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è {guild_name}: –æ—à–∏–±–∫–∞ –¥–ª—è {username}: {e}")
                continue
        
        logger.warning(f"‚ùå {guild_name}: –∫–∞–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω")
        return {}

    def _get_guild_channels_paginated(self, session: requests.Session, guild_id: str) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        channels = []
        url = f'https://discord.com/api/v9/guilds/{guild_id}/channels'
        
        while url:
            try:
                r = session.get(url)
                if r.status_code == 200:
                    batch = r.json()
                    channels.extend(batch)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                    if 'Link' in r.headers:
                        links = r.headers['Link'].split(',')
                        next_url = None
                        for link in links:
                            if 'rel="next"' in link:
                                next_url = link[link.find('<')+1:link.find('>')]
                                break
                        url = next_url
                    else:
                        url = None
                        
                elif r.status_code == 429:
                    retry_after = float(r.json().get('retry_after', 1))
                    logger.warning(f"‚è≥ Rate limit –∫–∞–Ω–∞–ª–æ–≤, –∂–¥–µ–º {retry_after}—Å...")
                    time.sleep(retry_after)
                    continue
                elif r.status_code == 403:
                    logger.debug(f"üîí –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º —Å–µ—Ä–≤–µ—Ä–∞ {guild_id}")
                    return []
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: HTTP {r.status_code}")
                    return []
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
                return []
                
        return channels

    def _filter_announcement_channels(self, channels: List[dict]) -> Dict[str, dict]:
        """–§–∏–ª—å—Ç—Ä—É–µ–º announcement –∫–∞–Ω–∞–ª—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        announcement_channels = {}
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ keywords –¥–ª—è –ø–æ–∏—Å–∫–∞
        priority_keywords = [
            'announcements',     # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            'announcement',
            'news',
            'updates',
            '–≤–∞–∂–Ω–æ–µ',
            '–æ–±—ä—è–≤–ª–µ–Ω–∏—è',
            '–∞–Ω–æ–Ω—Å—ã'
        ]
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for channel in channels:
            if channel['type'] not in [0, 5]:  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ announcement –∫–∞–Ω–∞–ª—ã
                continue
                
            channel_name = channel['name'].lower()
            
            # 1. –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π announcement —Ç–∏–ø (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)
            if channel.get('type') == 5:
                announcement_channels[channel['id']] = {
                    'name': channel['name'],
                    'type': channel['type'],
                    'priority': 1,
                    'raw_data': channel
                }
                continue
            
            # 2. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ "announcements" (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
            if channel_name == 'announcements':
                announcement_channels[channel['id']] = {
                    'name': channel['name'],
                    'type': channel['type'],
                    'priority': 2,
                    'raw_data': channel
                }
                continue
            
            # 3. –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ keywords (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3-10)
            for i, keyword in enumerate(priority_keywords):
                if keyword in channel_name:
                    announcement_channels[channel['id']] = {
                        'name': channel['name'],
                        'type': channel['type'],
                        'priority': 3 + i,
                        'raw_data': channel
                    }
                    break
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5
        sorted_channels = dict(sorted(
            announcement_channels.items(),
            key=lambda x: x[1]['priority']
        )[:5])
        
        return sorted_channels

    def discover_all_servers(self, save_to_file: bool = True) -> Dict[str, Dict[str, str]]:
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∏—Ö announcement –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
        all_guilds = self.get_all_guilds()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä
        server_mappings = {}
        processed_count = 0
        
        for guild_id, guild_data in all_guilds.items():
            guild_info = guild_data['guild_data']
            guild_name = guild_info['name']
            token_sessions = guild_data['accessible_tokens']
            
            processed_count += 1
            logger.info(f"üè∞ [{processed_count}/{len(all_guilds)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {guild_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º announcement –∫–∞–Ω–∞–ª—ã
            announcement_channels = self.get_guild_channels_multi_token(
                guild_id, guild_name, token_sessions
            )
            
            if announcement_channels:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞
                server_mappings[guild_name] = {}
                for channel_id, channel_info in announcement_channels.items():
                    server_mappings[guild_name][channel_id] = channel_info['name']
                    
                logger.success(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(announcement_channels)} announcement –∫–∞–Ω–∞–ª–æ–≤")
                for channel_id, info in announcement_channels.items():
                    logger.info(f"    üì¢ {info['name']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {info['priority']})")
            else:
                logger.warning(f"  ‚ö†Ô∏è Announcement –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏
            time.sleep(0.5)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if save_to_file:
            self._save_discovery_results(server_mappings, all_guilds)
        
        self.last_scan_timestamp = time.time()
        logger.success(f"üéâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {len(server_mappings)} —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å announcement –∫–∞–Ω–∞–ª–∞–º–∏")
        
        return server_mappings

    def get_new_servers_since_last_scan(self) -> Dict[str, Dict[str, str]]:
        """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not hasattr(self, 'last_known_servers'):
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_servers = self.discover_all_servers(save_to_file=False)
            self.last_known_servers = set(current_servers.keys())
            return current_servers
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–µ—Ä–≤–µ—Ä—ã
        current_servers = self.discover_all_servers(save_to_file=False)
        current_server_names = set(current_servers.keys())
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        new_server_names = current_server_names - self.last_known_servers
        
        if new_server_names:
            new_servers = {name: current_servers[name] for name in new_server_names}
            logger.info(f"üÜï –ù–∞–π–¥–µ–Ω–æ {len(new_servers)} –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:")
            for server_name in new_server_names:
                logger.info(f"  ‚Ä¢ {server_name}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
            self.last_known_servers = current_server_names
            return new_servers
        else:
            logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return {}

    def _save_discovery_results(self, server_mappings: Dict, all_guilds_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥
        with open('discovered_servers.json', 'w', encoding='utf-8') as f:
            json.dump(server_mappings, f, indent=2, ensure_ascii=False)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        detailed_data = {
            'discovery_timestamp': time.time(),
            'total_servers_found': len(server_mappings),
            'total_guilds_accessible': len(all_guilds_data),
            'server_mappings': server_mappings,
            'tokens_used': len(self.sessions),
            'detailed_guild_info': {
                guild_data['guild_data']['name']: {
                    'guild_id': guild_id,
                    'owner_id': guild_data['guild_data'].get('owner_id'),
                    'member_count': guild_data['guild_data'].get('approximate_member_count'),
                    'accessible_via_tokens': [t['username'] for t in guild_data['accessible_tokens']]
                }
                for guild_id, guild_data in all_guilds_data.items()
            }
        }
        
        with open('discovery_detailed.json', 'w', encoding='utf-8') as f:
            json.dump(detailed_data, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ discovered_servers.json –∏ discovery_detailed.json")

def parse_discord_servers() -> Dict[str, Dict[str, str]]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)"""
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    tokens_str = os.getenv('DISCORD_AUTH_TOKENS', '')
    tokens = [t.strip() for t in tokens_str.split(',') if t.strip()]
    
    if not tokens:
        logger.error("‚ùå –¢–æ–∫–µ–Ω—ã Discord –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
        return {}
    
    logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–∏—Ç–µ–ª—å –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    discovery = DiscordServerDiscovery(tokens)
    server_mappings = discovery.discover_all_servers()
    
    return server_mappings

def discover_new_servers_only() -> Dict[str, Dict[str, str]]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    load_dotenv()
    
    tokens_str = os.getenv('DISCORD_AUTH_TOKENS', '')
    tokens = [t.strip() for t in tokens_str.split(',') if t.strip()]
    
    if not tokens:
        logger.error("‚ùå –¢–æ–∫–µ–Ω—ã Discord –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
        return {}
    
    discovery = DiscordServerDiscovery(tokens)
    return discovery.get_new_servers_since_last_scan()

# CLI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == '__main__':
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == '--new-only':
        print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        new_servers = discover_new_servers_only()
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(new_servers)} –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
    else:
        print("üîç –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        all_servers = parse_discord_servers()
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(all_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")