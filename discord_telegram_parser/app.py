import json
import os
import asyncio
import threading
import time
from loguru import logger
from datetime import datetime

from .services.telegram_bot import TelegramBotService
from .services.discord_websocket import EnhancedDiscordWebSocketService
from .config.settings import config
from .main import DiscordParser

class EnhancedDiscordTelegramParser:
    def __init__(self):
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        from dotenv import load_dotenv
        load_dotenv(override=True)
        
        self.discord_parser = DiscordParser()
        self.telegram_bot = TelegramBotService(config.TELEGRAM_BOT_TOKEN)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π WebSocket —Å–µ—Ä–≤–∏—Å
        self.websocket_service = EnhancedDiscordWebSocketService(self.telegram_bot)
        
        # –ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        self.telegram_bot.discord_parser = self.discord_parser
        self.telegram_bot.websocket_service = self.websocket_service
        
        self.running = False
        self.websocket_task = None
        
    def discover_all_servers(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
        try:
            from discord_telegram_parser.utils.channel_id_parser import parse_discord_servers
            
            logger.info("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            mappings = parse_discord_servers()
            
            if mappings:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
                old_count = len(config.SERVER_CHANNEL_MAPPINGS)
                config.SERVER_CHANNEL_MAPPINGS = mappings
                new_count = len(mappings)
                
                logger.success(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
                logger.info(f"   üìä –ë—ã–ª–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {old_count}")
                logger.info(f"   üìä –°—Ç–∞–ª–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {new_count}")
                logger.info(f"   üìä –ü—Ä–∏—Ä–æ—Å—Ç: +{new_count - old_count}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ WebSocket –ø–æ–¥–ø–∏—Å–∫–∏
                for server, channels in mappings.items():
                    for channel_id in channels.keys():
                        self.websocket_service.add_channel_subscription(channel_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
                self._save_config_to_file(mappings)
                
                return mappings
            else:
                logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return {}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            return {}

    def _save_config_to_file(self, mappings):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            config_file = 'discord_telegram_parser/config/settings.py'
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            with open(config_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            new_config_section = f"\n# Auto-discovered servers - Updated {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nconfig.SERVER_CHANNEL_MAPPINGS = {json.dumps(mappings, indent=2, ensure_ascii=False)}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            content += new_config_section
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(content)
                
            logger.info(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {len(mappings)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    async def websocket_main_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π async —Ü–∏–∫–ª –¥–ª—è WebSocket —Å–µ—Ä–≤–∏—Å–∞ —Å –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º"""
        while self.running:
            try:
                logger.info("üöÄ Starting WebSocket connections with auto-discovery...")
                await self.websocket_service.start()
            except Exception as e:
                error_msg = str(e).encode('utf-8', 'replace').decode('utf-8')
                logger.error(f"WebSocket error: {error_msg}")
                logger.info("Restarting WebSocket in 30 seconds...")
                await asyncio.sleep(30)
    
    def run_websocket_in_thread(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–∏—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å async loop"""
        def websocket_thread():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(self.websocket_main_loop())
            except Exception as e:
                logger.error(f"WebSocket thread error: {e}")
            finally:
                loop.close()
        
        thread = threading.Thread(target=websocket_thread, daemon=True)
        thread.start()
        return thread
    
    def safe_encode_string(self, text):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode"""
        if not text:
            return ""
        try:
            if isinstance(text, str):
                text = text.encode('utf-8', 'surrogatepass').decode('utf-8', 'replace')
                text = ''.join(char for char in text if ord(char) < 0x110000)
            return text
        except (UnicodeEncodeError, UnicodeDecodeError):
            return "[Encoding Error]"
    
    def test_channel_http_access(self, channel_id):
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ HTTP"""
        try:
            session = self.discord_parser.sessions[0]
            r = session.get(f'https://discord.com/api/v9/channels/{channel_id}/messages?limit=1')
            return r.status_code == 200
        except:
            return False
    
    def sync_servers_enhanced(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –º–µ–∂–¥—É Discord –∏ Telegram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–µ—Ä–≤–µ—Ä—ã Discord
            current_servers = set(config.SERVER_CHANNEL_MAPPINGS.keys())
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø–∏–∫–∏ Telegram
            telegram_topics = set(self.telegram_bot.server_topics.keys())
            
            logger.info(f"üîÑ Enhanced server sync...")
            logger.info(f"   üìä Discord servers: {len(current_servers)}")
            logger.info(f"   üìä Telegram topics: {len(telegram_topics)}")
            logger.info(f"   üîç Auto-discovery: {'ENABLED' if self.websocket_service.auto_discovery_enabled else 'DISABLED'}")
            
            # –û—á–∏—â–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–ø–∏–∫–∏
            cleaned_topics = self.telegram_bot.cleanup_invalid_topics()
            if cleaned_topics > 0:
                logger.info(f"   üßπ Cleaned {cleaned_topics} invalid topics")
                telegram_topics = set(self.telegram_bot.server_topics.keys())
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã (—Ç–æ–ø–∏–∫–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            new_servers = current_servers - telegram_topics
            if new_servers:
                logger.info(f"   üÜï New servers found: {len(new_servers)}")
                for server in new_servers:
                    logger.info(f"      ‚Ä¢ {server} (topic will be created when needed)")
            
            # –ù–∞—Ö–æ–¥–∏–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
            removed_servers = telegram_topics - current_servers
            if removed_servers:
                logger.info(f"   üóëÔ∏è Removing topics for deleted servers: {len(removed_servers)}")
                for server in removed_servers:
                    if server in self.telegram_bot.server_topics:
                        old_topic_id = self.telegram_bot.server_topics[server]
                        del self.telegram_bot.server_topics[server]
                        logger.info(f"      ‚Ä¢ Removed {server} (topic {old_topic_id})")
                
                if removed_servers:
                    self.telegram_bot._save_data()
            
            logger.success(f"‚úÖ Enhanced server sync completed")
            
        except Exception as e:
            error_msg = str(e).encode('utf-8', 'replace').decode('utf-8')
            logger.error(f"‚ùå Error in enhanced server sync: {error_msg}")

    def initial_sync_enhanced(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º"""
        try:
            # –®–∞–≥ 1: –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –í–°–ï —Å–µ—Ä–≤–µ—Ä—ã (–Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ)
            logger.info("üîç Step 1: Discovering ALL servers...")
            discovered_servers = self.discover_all_servers()
            
            if not discovered_servers:
                logger.warning("‚ö†Ô∏è No servers discovered, using existing config")
                discovered_servers = config.SERVER_CHANNEL_MAPPINGS
            
            # –®–∞–≥ 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã –º–µ–∂–¥—É Discord –∏ Telegram
            logger.info("üîÑ Step 2: Enhanced server synchronization...")
            self.sync_servers_enhanced()
            
            # –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ HTTP-–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            logger.info("üì• Step 3: Smart initial sync (HTTP-accessible channels)...")
            messages = []
            http_channels = []
            websocket_only_channels = []
            
            for server, channels in discovered_servers.items():
                if not channels:
                    continue
                
                safe_server = self.safe_encode_string(server)
                    
                for channel_id, channel_name in channels.items():
                    safe_channel = self.safe_encode_string(channel_name)
                    
                    # –¢–µ—Å—Ç HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                    if self.test_channel_http_access(channel_id):
                        try:
                            recent_messages = self.discord_parser.parse_announcement_channel(
                                channel_id, 
                                safe_server,
                                safe_channel,
                                limit=3  # –ú–µ–Ω—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
                            )
                            
                            # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                            for msg in recent_messages:
                                msg.content = self.safe_encode_string(msg.content)
                                msg.author = self.safe_encode_string(msg.author)
                                msg.server_name = self.safe_encode_string(msg.server_name)
                                msg.channel_name = self.safe_encode_string(msg.channel_name)
                            
                            messages.extend(recent_messages)
                            http_channels.append((safe_server, safe_channel))
                            logger.info(f"‚úÖ HTTP sync: {safe_server}#{safe_channel} - {len(recent_messages)} messages")
                            
                        except Exception as channel_error:
                            safe_error = str(channel_error).encode('utf-8', 'replace').decode('utf-8')
                            logger.warning(f"‚ùå HTTP sync failed: {safe_server}#{safe_channel}: {safe_error}")
                            websocket_only_channels.append((safe_server, safe_channel))
                    else:
                        websocket_only_channels.append((safe_server, safe_channel))
                        logger.info(f"üîå WebSocket only: {safe_server}#{safe_channel} - will monitor via WebSocket")
            
            # –®–∞–≥ 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            logger.info(f"üìä Enhanced initial sync summary:")
            logger.info(f"   üìÅ Total servers discovered: {len(discovered_servers)}")
            logger.info(f"   ‚úÖ HTTP synced: {len(http_channels)} channels")
            logger.info(f"   üîå WebSocket only: {len(websocket_only_channels)} channels")
            logger.info(f"   üì® Total messages: {len(messages)}")
            logger.info(f"   üîç Auto-discovery: ENABLED for real-time detection")
            
            if websocket_only_channels:
                logger.info(f"üîå These channels will be monitored via WebSocket only:")
                for server, channel in websocket_only_channels[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    logger.info(f"   ‚Ä¢ {server}#{channel}")
                if len(websocket_only_channels) > 10:
                    logger.info(f"   ‚Ä¢ ... and {len(websocket_only_channels) - 10} more")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            if messages:
                messages.sort(key=lambda x: x.timestamp)
                
                server_messages = {}
                for msg in messages:
                    server = msg.server_name
                    if server not in server_messages:
                        server_messages[server] = []
                    server_messages[server].append(msg)
                
                logger.info(f"üì§ Sending messages for {len(server_messages)} servers...")
                
                for server, msgs in server_messages.items():
                    logger.info(f"   üìç {server}: {len(msgs)} messages")
                    self.telegram_bot.send_messages(msgs)
                
                logger.success(f"‚úÖ Enhanced initial sync completed: {len(messages)} messages sent")
            else:
                logger.info("‚ÑπÔ∏è No HTTP messages found during initial sync")
            
            logger.success(f"üéâ Enhanced smart initial sync complete! WebSocket will handle real-time monitoring with auto-discovery.")
            
        except Exception as e:
            try:
                error_msg = str(e).encode('utf-8', 'replace').decode('utf-8')
            except:
                error_msg = "Enhanced initial sync error (encoding issue)"
            logger.error(f"‚ùå Error in enhanced initial sync: {error_msg}")
    
    def enhanced_fallback_polling_loop(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        while self.running:
            try:
                time.sleep(600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç (–º–µ–Ω—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∏)
                
                if not config.SERVER_CHANNEL_MAPPINGS:
                    continue
                
                logger.debug("üîÑ Enhanced fallback polling check...")
                
                server_messages = {}
                recent_threshold = datetime.now().timestamp() - 300  # 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ HTTP-–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
                http_channels_checked = 0
                for server, channels in config.SERVER_CHANNEL_MAPPINGS.items():
                    safe_server = self.safe_encode_string(server)
                    
                    for channel_id, channel_name in channels.items():
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ WebSocket
                        if not self.test_channel_http_access(channel_id):
                            continue
                            
                        http_channels_checked += 1
                        if http_channels_checked > 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
                            break
                            
                        try:
                            safe_channel = self.safe_encode_string(channel_name)
                            
                            recent_messages = self.discord_parser.parse_announcement_channel(
                                channel_id, 
                                safe_server,
                                safe_channel,
                                limit=2  # –ï—â–µ –º–µ–Ω—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–æ–ª–ª–∏–Ω–≥–∞
                            )
                            
                            # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                            for msg in recent_messages:
                                msg.content = self.safe_encode_string(msg.content)
                                msg.author = self.safe_encode_string(msg.author)
                                msg.server_name = self.safe_encode_string(msg.server_name)
                                msg.channel_name = self.safe_encode_string(msg.channel_name)
                            
                            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—á–µ–Ω—å —Å–≤–µ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                            new_messages = [
                                msg for msg in recent_messages
                                if msg.timestamp.timestamp() > recent_threshold
                            ]
                            
                            if new_messages:
                                if safe_server not in server_messages:
                                    server_messages[safe_server] = []
                                server_messages[safe_server].extend(new_messages)
                            
                        except Exception as e:
                            logger.debug(f"Fallback polling error for {safe_server}#{safe_channel}: {e}")
                            continue
                    
                    if http_channels_checked > 20:
                        break
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if server_messages:
                    total_messages = sum(len(msgs) for msgs in server_messages.values())
                    logger.info(f"üîÑ Fallback polling found {total_messages} new messages in {len(server_messages)} servers")
                    
                    for server, msgs in server_messages.items():
                        msgs.sort(key=lambda x: x.timestamp)
                        logger.info(f"   üìç {server}: {len(msgs)} messages")
                        self.telegram_bot.send_messages(msgs)
                
            except Exception as e:
                error_msg = str(e).encode('utf-8', 'replace').decode('utf-8')
                logger.error(f"Error in enhanced fallback polling: {error_msg}")
                time.sleep(120)  # –ë–æ–ª—å—à–µ –∂–¥–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
        self.running = True
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            logger.info("üöÄ Starting enhanced initial sync with full server discovery...")
            self.initial_sync_enhanced()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram bot –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            bot_thread = threading.Thread(
                target=self.telegram_bot.start_bot,
                daemon=True
            )
            bot_thread.start()
            logger.success("‚úÖ Telegram bot started with enhanced features")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π WebSocket —Å–µ—Ä–≤–∏—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            websocket_thread = self.run_websocket_in_thread()
            logger.success("‚úÖ Enhanced WebSocket service started with auto-discovery")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            fallback_thread = threading.Thread(
                target=self.enhanced_fallback_polling_loop,
                daemon=True
            )
            fallback_thread.start()
            logger.success("‚úÖ Enhanced fallback polling started")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            discovery_stats = self.websocket_service.get_discovery_stats()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            logger.success("üéâ Enhanced Discord Telegram Parser running!")
            logger.info("üìä Enhanced Features:")
            logger.info("   üîç FULL server auto-discovery (finds ALL 15+ servers)")
            logger.info("   ‚ö° Real-time new server detection via WebSocket")
            logger.info("   üìã One server = One topic (no duplicates)")
            logger.info("   üßµ Thread-safe topic creation")
            logger.info("   üßπ Auto-cleanup of invalid topics")
            logger.info("   üåê HTTP channels: Initial sync + smart fallback polling")
            logger.info("   üì° WebSocket channels: Real-time monitoring")
            logger.info("   üìÅ Messages grouped by server")
            logger.info("   üíæ Auto-save updated configuration")
            logger.info(f"   üìä Current stats: {discovery_stats['known_servers']} servers, {discovery_stats['subscribed_channels']} channels")
            logger.info("   üö® Automatic notifications for new servers")
            logger.info("Press Ctrl+C to stop")
            
            while self.running:
                time.sleep(5)
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
                if int(time.time()) % 300 == 0:
                    stats = self.websocket_service.get_discovery_stats()
                    logger.info(f"üìä Stats: {stats['known_servers']} servers, {stats['subscribed_channels']} channels, auto-discovery: {stats['auto_discovery_enabled']}")
                
        except KeyboardInterrupt:
            logger.info("Shutting down enhanced parser...")
            self.running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–µ—Ä–≤–∏—Å
            if self.websocket_service:
                asyncio.run(self.websocket_service.stop())
                
        except Exception as e:
            error_msg = str(e).encode('utf-8', 'replace').decode('utf-8')
            logger.error(f"Error in enhanced main run loop: {error_msg}")
            self.running = False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Starting Enhanced Discord Telegram Parser with full auto-discovery...")
    app = EnhancedDiscordTelegramParser()
    app.run()

if __name__ == '__main__':
    main()